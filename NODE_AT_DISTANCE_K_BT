// ----------NODE  AT DISTANCE K AT BINARY TREE ------------
      
#include "bits/stdc++.h"
using namespace std;

  struct Node{
      int data;
      struct Node*left;
      struct Node*right;
      
//   CONSTRUCTOR----    
      Node(int val){
      data = val;
      left =NULL;
      right = NULL;
  }

};

// --------------------case 1---------------------------

  void print_subtree_nodes(Node*root, int k){
      if(root==NULL || k<0){
          return;
      }
      if(k == 0){
         cout<<root->data<<" " ;
         return;
      }
      
      print_subtree_nodes(root->left, k-1);
      print_subtree_nodes(root->right , k-1);
  }
  
//   ----------------------case 2---------------------

int print_nodes_at_k(Node*root , Node*target , int k){
    if(root == NULL){
        return -1;
    }
    if(root == target){
        print_subtree_nodes(root , k);
        return 0;
    }
    // ------------------------------------
    
    int dl = print_nodes_at_k(root->left ,target, k);
    if(dl != -1){
       if(dl + 1 == k) {
           cout<<root->data<<" ";
       }
       else{
           print_subtree_nodes(root->right,k-dl-2);
       }
        return 1+dl;
    }
    
    // --------------------------------------------
    int dr = print_nodes_at_k(root->right ,target, k);
    if(dr != -1){
       if(dr + 1 == k) {
           cout<<root->data<<" ";
       }
       else{
           print_subtree_nodes(root->left,k-dr-2);
       }
        return 1+dr;
    }
    
     return -1;
}

 

int main()
{
    struct Node* root= new Node(1);
    root->left = new Node(2);
    root->right= new Node(3);
     root->left->left = new Node(4)  ;
      
      
       print_nodes_at_k(root, root->left ,1);
        
    return 0;
}
